jobs:
- job: SetEnvironmentVariables
  displayName: "Set Global Environment Variables"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - checkout: self
  - script: |
      echo "##vso[task.setvariable variable=AZURE_SAS_TOKEN;isOutput=true]$(AZURE_SAS_TOKEN)"
      echo "##vso[task.setvariable variable=AZURE_STORAGE_CONNECTION_STRING;isOutput=true]$(AZURE_STORAGE_CONNECTION_STRING)"
      echo "##vso[task.setvariable variable=AZURE_SAS_RELEASE_NOTE;isOutput=true]$(AZURE_SAS_RELEASE_NOTE)"
      echo "##vso[task.setvariable variable=AZURE_BLOB_CONTAINER_NAME;isOutput=true]$(AZURE_BLOB_CONTAINER_NAME)"
      echo "##vso[task.setvariable variable=AZURE_RELEASE_NOTES_CONTAINER;isOutput=true]$(AZURE_RELEASE_NOTES_CONTAINER)"
      echo "##vso[task.setvariable variable=AZURE_BLOB_ACCOUNT_NAME;isOutput=true]$(AZURE_BLOB_ACCOUNT_NAME)"
      echo "##vso[task.setvariable variable=DB_SERVER;isOutput=true]$(DB_SERVER)"
      echo "##vso[task.setvariable variable=DB_NAME;isOutput=true]$(DB_NAME)"
      echo "##vso[task.setvariable variable=DB_USER;isOutput=true]$(DB_USER)"
      echo "##vso[task.setvariable variable=DB_PASSWORD;isOutput=true;isSecret=true]$(DB_PASSWORD)"
    name: SetEnvStep  # Defines the step name, so other jobs can reference its output
    displayName: 'Set Environment Variables Globally'

- job: ExtractDeploymentPackage
  displayName: "Extract Deployment Package"
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - download: current
    artifact: DeploymentPackage

  - task: ExtractFiles@1
    displayName: 'Extract Deployment Package'
    inputs:
      archiveFilePatterns: '**/*.zip'
      destinationFolder: '$(System.DefaultWorkingDirectory)/deployment'

  - script: |
      echo "Checking extracted contents..."
      ls -R $(System.DefaultWorkingDirectory)/deployment
    displayName: "Debug: List Extracted Deployment Files"

# - job: SmokeTest
#   displayName: "Run Smoke Test"
#   dependsOn: ExtractDeploymentPackage
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.x'
#   - script: |
#       REQUIREMENTS_FILE=$(find $(System.DefaultWorkingDirectory)/deployment -name "requirements.txt")
#       if [ -f "$REQUIREMENTS_FILE" ]; then
#           pip install -r $REQUIREMENTS_FILE
#       else
#           echo "Error: requirements.txt not found!"
#           exit 1
#       fi
#     displayName: 'Install Dependencies'
#   - script: python $(System.DefaultWorkingDirectory)/deployment/scripts/smoke_test.py
#     displayName: 'Run Smoke Test on Database'
#     env:
#       AZURE_SAS_TOKEN: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.AZURE_SAS_TOKEN'])

- job: UploadToBlob
  displayName: "Upload Files"
  dependsOn: SetEnvironmentVariables
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
  - script: |
      REQUIREMENTS_FILE=$(find $(System.DefaultWorkingDirectory)/deployment -name "requirements.txt")
      if [ -f "$REQUIREMENTS_FILE" ]; then
          pip install -r $REQUIREMENTS_FILE
      else
          echo "Error: requirements.txt not found!"
          exit 1
      fi
    displayName: 'Install Dependencies'
  - script: python $(System.DefaultWorkingDirectory)/deployment/scripts/upload_to_blob.py
    displayName: 'Upload Files to Blob Storage'
    env:
      AZURE_SAS_TOKEN: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.AZURE_SAS_TOKEN'])
      
# - job: InsertIntoDatabase
#   displayName: "Process Data"
#   dependsOn: UploadToBlob
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.x'

#   # Install ODBC Driver 18 for SQL Server
#   - script: |
#       sudo su
#       sudo apt-get update
#       sudo ACCEPT_EULA=Y apt-get install -y curl gnupg2
#       curl https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
#       sudo add-apt-repository "$(curl -fsSL https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list)"
#       sudo apt-get update
#       sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18
#       sudo ACCEPT_EULA=Y apt-get install -y unixodbc-dev
#       sudo apt-get install -y libunwind8
#     displayName: 'Install ODBC Driver 18 for SQL Server'

#   - script: |
#       REQUIREMENTS_FILE=$(find $(System.DefaultWorkingDirectory)/deployment -name "requirements.txt")
#       if [ -f "$REQUIREMENTS_FILE" ]; then
#           pip install -r $REQUIREMENTS_FILE
#       else
#           echo "Error: requirements.txt not found!"
#           exit 1
#       fi
#     displayName: 'Install Dependencies'
#   - script: python $(System.DefaultWorkingDirectory)/deployment/scripts/process_data.py
#     displayName: 'Read Blob & Insert Data into Database'
#     env:
#       DB_SERVER: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.DB_SERVER'])
#       DB_NAME: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.DB_NAME'])
#       DB_USER: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.DB_USER'])
#       DB_PASSWORD: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.DB_PASSWORD'])

- job: GenerateReleaseNote
  displayName: "Generate Release Note & Notify"
  dependsOn: UploadToBlob
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
  - script: |
      REQUIREMENTS_FILE=$(find $(System.DefaultWorkingDirectory)/deployment -name "requirements.txt")
      if [ -f "$REQUIREMENTS_FILE" ]; then
          pip install -r $REQUIREMENTS_FILE
      else
          echo "Error: requirements.txt not found!"
          exit 1
      fi
    displayName: 'Install Dependencies'
  - script: python $(System.DefaultWorkingDirectory)/deployment/scripts/generate_release_note.py
    displayName: 'Generate Release Note'
    env:
      AZURE_STORAGE_CONNECTION_STRING: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.AZURE_STORAGE_CONNECTION_STRING'])
      AZURE_SAS_RELEASE_NOTE: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.AZURE_SAS_RELEASE_NOTE'])
      AZURE_RELEASE_NOTES_CONTAINER: $(dependencies.SetEnvironmentVariables.outputs['SetEnvStep.AZURE_RELEASE_NOTES_CONTAINER'])
  - script: python $(System.DefaultWorkingDirectory)/deployment/scripts/send_email.py
    displayName: 'Send Email Notification'
